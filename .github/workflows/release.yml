name: Release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Specify tag to release'
        required: true
        default: '1.0.0'

env:
  PLUGIN_NAME: oencrypt

jobs:
  update_version:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.determine_tag.outputs.tag_name }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Sync with remote master
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch origin
          git pull origin master --rebase

      - name: Determine tag name
        id: determine_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG_NAME="${{ github.event.inputs.tag }}"
          else
            TAG_NAME=${{ github.ref }}
            TAG_NAME=${TAG_NAME#refs/tags/}
          fi
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Validate tag format
        run: |
          TAG_NAME=${{ steps.determine_tag.outputs.tag_name }}
          if ! [[ "$TAG_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag '$TAG_NAME' does not follow SemVer format (MAJOR.MINOR.PATCH)."
            exit 1
          fi

      - name: Update versions.json
        run: |
          TAG_NAME=${{ steps.determine_tag.outputs.tag_name }}
          if ! grep -q "\"$TAG_NAME\":" versions.json; then
            LAST_VERSION=$(jq -r 'keys | .[-1]' versions.json)
            PREVIOUS_VERSION=$(jq -r ".\"$LAST_VERSION\"" versions.json)
            jq --arg tag "$TAG_NAME" --arg last "$PREVIOUS_VERSION" '.[$tag] = $last' versions.json > tmp.json && mv tmp.json versions.json
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add versions.json
            git commit -m "Update versions.json for $TAG_NAME"
          fi

      - name: Update package.json
        run: |
          TAG_NAME=${{ steps.determine_tag.outputs.tag_name }}
          CURRENT_VERSION=$(jq -r '.version' package.json)
          if [ "$CURRENT_VERSION" != "$TAG_NAME" ]; then
            jq --arg tag "$TAG_NAME" '.version = $tag' package.json > tmp.json && mv tmp.json package.json
            git add package.json
            git commit -m "Update package.json version to $TAG_NAME"
          fi

      - name: Update manifest.json
        run: |
          TAG_NAME=${{ steps.determine_tag.outputs.tag_name }}
          CURRENT_VERSION=$(jq -r '.version' manifest.json)
          if [ "$CURRENT_VERSION" != "$TAG_NAME" ]; then
            jq --arg tag "$TAG_NAME" '.version = $tag' manifest.json > tmp.json && mv tmp.json manifest.json
            git add manifest.json
            git commit -m "Update manifest.json version to $TAG_NAME"
          fi

      - name: Push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git fetch origin master
          
          if ! git rebase origin/master; then
            echo "Rebase conflicts detected."
            exit 1
          fi
          
          git push origin master

  build:
    runs-on: ubuntu-latest
    needs: update_version

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Build
        id: build
        run: |
          npm install
          npm run build
          mkdir ${{ env.PLUGIN_NAME }}
          mkdir dist
          cp ./main.js ./manifest.json dist
          cp ./main.js ./manifest.json ${{ env.PLUGIN_NAME }}
          cp ./assets/styles.css ./assets/styles.css ${{ env.PLUGIN_NAME }}
          zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}
          ls

      - name: Create tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag -a ${{ needs.update_version.outputs.tag_name }} -m "Release version ${{ needs.update_version.outputs.tag_name }}"
          git push origin ${{ needs.update_version.outputs.tag_name }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.update_version.outputs.tag_name }}
          release_name: ${{ needs.update_version.outputs.tag_name }}
          draft: false
          prerelease: false

      - name: Upload zip file
        id: upload-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PLUGIN_NAME }}.zip
          asset_name: ${{ env.PLUGIN_NAME }}-${{ needs.update_version.outputs.tag_name }}.zip
          asset_content_type: application/zip

      - name: Upload main.js
        id: upload-main
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./main.js
          asset_name: main.js
          asset_content_type: text/javascript

      - name: Upload styles.css
        id: upload-css
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./assets/styles.css
          asset_name: styles.css
          asset_content_type: text/css

      - name: Upload manifest.json
        id: upload-manifest
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./manifest.json
          asset_name: manifest.json
          asset_content_type: application/json